/*
Jenkins job does reproducible build compare.
*/
import groovy.json.JsonOutput

env.NODE_LABEL = 'dockerBuild&&linux&&x64'
pipeline {
    agent { label NODE_LABEL }
    stages {
        stage('Prepare') { //Copy artifacts, reset parameters,trigger build and copyArtifacts
            steps {
                cleanWs()
                checkout scm
                copyArtifacts excludes: '**/OpenJDK*-sbom*metadata.json,**/OpenJDK*-jdk-sources*.tar.gz', 
                                filter: '**/OpenJDK*-jdk*.tar.gz,**/OpenJDK*-jdk*.zip,**/OpenJDK*-sbom*.json',
                                fingerprintArtifacts: true, 
                                flatten: true, 
                                projectName: "build-scripts/jobs/jdk17u/jdk17u-mac-x64-temurin",
                                target: 'original/',
                                selector: specific("266")
                script {
                    timeout(time: 2, unit: 'HOURS') {
                                copyArtifacts(
                                    projectName: "build-scripts/jobs/jdk17u/jdk17u-mac-x64-temurin",
                                    selector:specific("266"),
                                    excludes: '**/OpenJDK*-jdk-sources*.tar.gz',
                                    filter: '**/OpenJDK*-jdk*.tar.gz,**/OpenJDK*-jdk*.zip',
                                    target: 'reproduced/',
                                    fingerprintArtifacts: true,
                                    flatten: true
                                )
                            }

                    archiveArtifacts artifacts: '**/OpenJDK*-jdk*.tar.gz,**/OpenJDK*-jdk*.zip', fingerprint: true
                }
            }
        }
        stage('Compare') {
            agent { label 'macos10.14&&build&&mac&&x64' }
            steps {
                copyArtifacts filter: '**/OpenJDK*-jdk*.tar.gz,**/OpenJDK*-jdk*.zip',
                    fingerprintArtifacts: true, 
                    projectName: env.JOB_NAME,
                    selector: specific("${env.BUILD_NUMBER}")
                checkout([$class: 'GitSCM', branches: [[name: 'mac']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "temurin-build"]], submoduleCfg: [], userRemoteConfigs: [[url: "https://github.com/sophia-guo/openjdk-build.git"]]])
            
                script {

                    def originalJDKFile = findFiles(glob: "original/*.tar.gz")
                    def reproducedJDKFile = findFiles(glob: "reproduced/*.tar.gz")
                    def untarOriginalJDK = sh returnStatus: true, script: "tar xzf ${originalJDKFile[0].path} --strip-components=1 -C original"
                    if (untarOriginalJDK != 0 ) {
                        currentBuild.result = 'UNSTABLE'
                        error " Untar ${originalJDKFile[0].name} failed"
                        return
                    }
                    def untarReproducedJDK = sh returnStatus: true, script: "tar xzf ${reproducedJDKFile[0].path} --strip-components=1 -C reproduced"
                    if (untarReproducedJDK != 0 ) {
                        currentBuild.result = 'UNSTABLE'
                        error " Untar ${reproducedJDKFile[0].name} failed"
                        return
                    }
                    sh "find . -type f -name 'OpenJDK*-jdk*.tar.gz' -delete"

                    try {
                        dir('temurin-build/tooling') {
                            def rc = 0
                            sh "ls -l ${WORKSPACE}/original"
                            sh "ls -l ${WORKSPACE}/reproduced"
                            rc = sh returnStatus: true, script: "./repro_compare.sh temurin ${WORKSPACE}/original/Contents/Home temurin ${WORKSPACE}/reproduced/Contents/Home Darwin"
                            if (rc != 0) {
                                currentBuild.result = 'FAILURE'
                                echo 'Failed: two builds are not the same! Please see the archived repro_diff.out.'
                            } else {
                                echo 'Success: two builds are the same!'
                            }
                            archiveArtifacts artifacts: "**/repro_diff.out"
                        }
                    } catch (Exception err) {
                        echo err.getMessage()
                        currentBuild.result = 'FAILURE'
                    } finally {
                        cleanWs()
                    }
                }
            }
        }
    }
}