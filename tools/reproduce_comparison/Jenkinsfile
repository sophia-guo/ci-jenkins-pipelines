/*
Jenkins job does reproducible build compare.
*/
import groovy.json.JsonOutput

pipeline {
    agent { label 'dockerBuild&&linux&&x64' }
    parameters {
        string(name: 'COMPARED_JOB_NUMBER1', defaultValue: '', description: 'Compared nightly build job name')
        string(name: 'COMPARED_JOB_NUMBER2', defaultValue: '', description: 'Compared nightly build job name')
        string(name: 'COMPARED_JOB_NAME', defaultValue: '', description: 'Compared nightly build job number')
    }

    stages {
        stage('Prepare') { //Copy artifacts, reset parameters,trigger build and copyArtifacts
            steps {
                cleanWs()
                checkout scm
                copyArtifacts excludes: '**/OpenJDK*-sbom*metadata.json,**/OpenJDK*-jdk-sources*.tar.gz', 
                                filter: '**/OpenJDK*-jdk*.tar.gz,**/OpenJDK*-sbom*.json',
                                fingerprintArtifacts: true, 
                                flatten: true, 
                                projectName: "${params.COMPARED_JOB_NAME}",
                                target: 'original/',
                                selector: specific("${params.COMPARED_JOB_NUMBER1}")
                copyArtifacts excludes: '**/OpenJDK*-sbom*metadata.json,**/OpenJDK*-jdk-sources*.tar.gz', 
                                filter: '**/OpenJDK*-jdk*.tar.gz,**/OpenJDK*-sbom*.json',
                                fingerprintArtifacts: true, 
                                flatten: true, 
                                projectName: "${params.COMPARED_JOB_NAME}",
                                target: 'reproduced/',
                                selector: specific("${params.COMPARED_JOB_NUMBER1}")
                script {

                    def originalJDKFile = findFiles(glob: "original/*.tar.gz")
                    def reproducedJDKFile = findFiles(glob: "reproduced/*.tar.gz")
                    def untarOriginalJDK = sh returnStatus: true, script: "tar xzf ${originalJDKFile[0].path} --strip-components=1 -C original"
                    if (untarOriginalJDK != 0 ) {
                        currentBuild.result = 'UNSTABLE'
                        error " Untar ${originalJDKFile[0].name} failed"
                        return
                    }
                    def untarReproducedJDK = sh returnStatus: true, script: "tar xzf ${reproducedJDKFile[0].path} --strip-components=1 -C reproduced"
                    if (untarReproducedJDK != 0 ) {
                        currentBuild.result = 'UNSTABLE'
                        error " Untar ${originalJDKFile[0].name} failed"
                        return
                    }
                    sh """
                    
                    find . -type f -name jrt-fs.jar
                    find . -type f -name '*.tar.gz' -delete
                    find . -type f -name '*.json' -delete
                    cd original/lib
                    ls
                    """
                }
            }
        }
        
        stage('Compare') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: 'ReproD']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "temurin-build"]], submoduleCfg: [], userRemoteConfigs: [[url: "https://github.com/sophia-guo/openjdk-build.git"]]])
                script {
                    try {
                        dir('temurin-build/tooling') {
                            def rc = 0
                            if (COMPARED_JOB_NAME.contains('linux')) {
                                rc = sh returnStatus: true, script: "./linux_repro_compare.sh temurin ${WORKSPACE}/original temurin ${WORKSPACE}/reproduced"
                            } else if (COMPARED_JOB_NAME.contains('mac')) {
                                // mac
                                //sh "./tooling/mac_repro_compare.sh temurin ./original temurin ./reproduced ${self_cert_file} ${self_cert_passwd}"
                                echo 'todo mac build comparison'
                            } else if (COMPARED_JOB_NAME.contains('windows')) {
                                //windows
                                echo 'todo windows build comparison'
                            }
                            if (rc != 0) {
                                currentBuild.result = 'FAILURE'
                                error 'Error: two builds are not the same!'
                            } else {
                                echo 'Success: two builds are the same!'
                            }
                        }
                    } catch (Exception err) {
                        echo err.getMessage()
                        currentBuild.result = 'FAILURE'
                    } finally {
                        cleanWs()
                    }
                }
            }
        }
    }
}